name: Build Bazzite
on:
  pull_request:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - "installer/**"
      - "repo_content/**"
      - "spec_files/**"
      - "post_install_files/**"
      - "press_kit/**"
      - "docs/**"
      - ".github/workflows/build_iso*.yml"
  push:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - "repo_content/**"
      - "spec_files/**"
      - "post_install_files/**"
      - "press_kit/**"
      - ".github/workflows/build_iso*.yml"
  merge_group:
  workflow_dispatch:
    inputs:
      handwritten:
        description: 'Small changelog:'
      # Run with this periodically to analyze the image again
      # As package drift will make the plan eventually non-ideal
      # (existing users will have to redownload most of the image)
      fresh-rechunk:
        description: 'Clear rechunk history'
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  push-ghcr:
    name: Make
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image:
          - bazzite
          - bazzite-gnome
          - bazzite-deck
          - bazzite-deck-gnome
          - bazzite-deck-nvidia
          - bazzite-deck-nvidia-gnome
          - bazzite-nvidia
          - bazzite-gnome-nvidia
          - bazzite-nvidia-open
          - bazzite-gnome-nvidia-open
        include:
          - fedora_version: 43
            kernel_version: ${{ (github.ref_name == 'testing' || github.ref_name == 'unstable') && 'latest' || 'latest' }}
            base_image_flavor: main
    steps:
      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main
        with:
          target-dir: /var/lib/containers
      
      - name: Define base variables
        id: base
        run: |
          IMAGE="${{ matrix.image }}"
          if [[ "$IMAGE" == *gnome* ]]; then
            BASE_IMAGE_NAME="silverblue"
          else
            BASE_IMAGE_NAME="kinoite"
          fi
          echo "base_image_name=$BASE_IMAGE_NAME" >> "$GITHUB_OUTPUT"

          #
          # Define Container Target
          #
          CONTAINER_TARGET="$IMAGE"
          CONTAINER_TARGET="${CONTAINER_TARGET/-open/}"
          CONTAINER_TARGET="${CONTAINER_TARGET/-gnome/}"
          if [[ "$CONTAINER_TARGET" == "bazzite-deck-nvidia" ]]; then
            echo "container_target=bazzite-nvidia" >> "$GITHUB_OUTPUT"
          else
            echo "container_target=$CONTAINER_TARGET" >> "$GITHUB_OUTPUT"
          fi
          # Define Nvidia base
          if [[ "$IMAGE" == "bazzite-deck*" ]]; then
            echo "nvidia_base=bazzite-deck" >> "$GITHUB_OUTPUT"
          else
            echo "nvidia_base=bazzite" >> "$GITHUB_OUTPUT"
          fi
          echo "sha_head_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          # Define Nvidia Flavor
          if [[ "$IMAGE" == "*nvidia-open" || "$IMAGE" == "*-deck-nvidia*" ]]; then
            echo "target_nvidia_flavor=nvidia-open" >> "$GITHUB_OUTPUT"
          else
            echo "target_nvidia_flavor=nvidia" >> "$GITHUB_OUTPUT"
          fi
          
          #
          # Define push and pull registries
          #
          PULL_REGISTRY=ghcr.io/ublue-os
          PUSH_REGISTRY=ghcr.io/${{ github.repository_owner }}
          echo "push_registry=${PUSH_REGISTRY}" >> $GITHUB_OUTPUT
          echo "pull_registry=${PULL_REGISTRY}" >> $GITHUB_OUTPUT
          
          echo "output_image=${PULL_REGISTRY}/${{ matrix.image }}" >> $GITHUB_OUTPUT
          BASE_IMAGE="${PULL_REGISTRY}/$BASE_IMAGE_NAME-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }}"
          echo "base_image=${BASE_IMAGE}" >> $GITHUB_OUTPUT

          if [ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]; then
            IMAGEREF=""
          else
            IMAGEREF="$PULL_REGISTRY/${{ matrix.image }}:stable"
          fi
          echo "prev_ref=${IMAGEREF}" >> $GITHUB_OUTPUT

          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      # Checkout push-to-registry action GitHub repository
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # Prepare offline documentation
      - name: Download offline docs
        id: download_offline_docs
        continue-on-error: true
        env:
          docs_repo: bazzite-org/docs.bazzite.gg
          GH_TOKEN: ${{ github.token }}
        run: |
          DOCS_DIR="${{ github.workspace }}/system_files/desktop/shared/usr/share/ublue-os/docs/html"
          mkdir -p $DOCS_DIR
          cd $(mktemp -d)
          gh run download --repo=$docs_repo -n github-pages
          tar -xC "$DOCS_DIR" -f artifact.tar

      - name: Check just syntax
        uses: ublue-os/just-action@bda593098a84a84973b002b4377709166a68be52 # v2
      
      - name: Pull Images and find versions
        id: labels
        run: |
          set -eo pipefail
          
          #
          # Base Image and version
          #

          sudo podman pull ${{ steps.base.outputs.base_image }}
          sudo skopeo inspect docker://${{ steps.base.outputs.base_image }} > source.json
          UPSTREAM_TAG=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
          if [ -z "$UPSTREAM_TAG" ] || [ "null" = "$UPSTREAM_TAG" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          # Remove .0 suffix from upstream tag so we can add our own and
          # the wrong one does not end up in the image.
          UPSTREAM_TAG="${UPSTREAM_TAG%\.[0-9]}" 
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"

          if [ -n "${{ github.event.pull_request.number }}" ]; then
            VERSION="pr-${FEDORA_VERSION}-${{ github.event.pull_request.number }}"
            PRETTY_VERSION="PR (${{ github.event.pull_request.number }}, ${UPSTREAM_TAG})"
          elif [[ ${{ github.ref_name }} == "unstable" ]]; then
            VERSION="unstable-${UPSTREAM_TAG}"
            PRETTY_VERSION="Unstable (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            VERSION="testing-${UPSTREAM_TAG}"
            PRETTY_VERSION="Testing (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          else
            VERSION="${UPSTREAM_TAG}"
            PRETTY_VERSION="Stable (F${UPSTREAM_TAG})"
          fi
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "pretty=${PRETTY_VERSION}" >> $GITHUB_OUTPUT

          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      # Generate a file with all the build-args passed to buildah
      - name: Prepare build args file
        run: |
          cat <<'EOF' >>build_args.txt
          BASE_IMAGE_NAME=${{ steps.base.outputs.base_image_name }}
          FEDORA_VERSION=${{ matrix.fedora_version }}
          BASE_IMAGE=${{ steps.base.outputs.base_image }}
          IMAGE_NAME=${{ matrix.image }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          IMAGE_BRANCH=${{ github.ref_name }}
          NVIDIA_BASE=${{ steps.base.outputs.nvidia_base }}
          KERNEL_VERSION=${{ matrix.kernel_version }}
          SHA_HEAD_SHORT=${{ steps.base.outputs.sha_head_short }}
          VERSION_TAG=${{ steps.labels.outputs.tag }}
          VERSION_PRETTY=${{ steps.labels.outputs.pretty }}
          EOF

      # Build image using buildah and save it to raw-img
      - name: Build Image
        id: build_image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo -E buildah build \
            --target ${{ steps.base.outputs.container_target }} \
            --build-arg-file build_args.txt \
            --secret "id=GITHUB_TOKEN,env=GITHUB_TOKEN" \
            --tag raw-img .

      # Reprocess raw-img using rechunker which will delete it
      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@5fbe1d3a639615d2548d83bc888360de6267b1a2 # v1.2.4
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.2.4'
          ref: 'raw-img'
          prev-ref: '${{ steps.base.outputs.prev_ref }}'
          version: '${{ steps.labels.outputs.tag }}'
          labels: |
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/ublue-os/bazzite/main/repo_content/logo.png
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/bazzite/refs/heads/main/README.md
            org.opencontainers.image.created=<timestamp>
            org.opencontainers.image.description=Bazzite is a custom image that brings the best of Linux gaming to all of your devices - including your favorite handheld.
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://bazzite.gg
            org.opencontainers.image.title=Bazzite
            org.opencontainers.image.vendor=Universal Blue
            org.opencontainers.image.url=https://bazzite.gg
      
      # Generate tags after rechunker runs and checks the primary tag is not duplicated
      # If it is, rechunk will suffix it by .1, .2, etc and put it in steps.rechunk.outputs.version
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Common vars for generating tags
          VERSION_TAG="${{ steps.rechunk.outputs.version }}"

          if [[ ${{ github.ref_name }} == "unstable" ]]; then
            BUILD_TAGS=("unstable")
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            BUILD_TAGS=("testing")
          else
            BUILD_TAGS=("stable-${VERSION_TAG}" "latest" "stable")
          fi
          
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          echo "alias_tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR and Sign
        if: github.event_name != 'pull_request'
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            log_sum() { echo "$1" >> $GITHUB_STEP_SUMMARY; }
            log_sum '# Push to GHCR result'
            log_sum '```'
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Push unique image id and sign, this way once evergreen tag is published
            # It will always be signed
            dest_image="${{ steps.base.outputs.output_image }}:${{ steps.rechunk.outputs.version }}"
            sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://$dest_image
            log_sum "$dest_image"
            DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${{ steps.rechunk.outputs.ref }})
            cosign sign -y --key env://SIGNING_SECRET --new-bundle-format=false \
              "${{ steps.base.outputs.output_image }}@$DIGEST"

            for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
              dest_image="${{ steps.base.outputs.output_image }}:$tag"
              sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://$dest_image
              log_sum "$dest_image"
            done
            log_sum '```'
        env:
          SIGNING_SECRET: ${{ secrets.SIGNING_SECRET }}

  generate_release:
    name: Generate Release
    needs: [push-ghcr]
    if: github.event_name != 'pull_request'
    secrets: inherit
    uses: ./.github/workflows/generate_release.yml
